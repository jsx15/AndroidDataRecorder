@page "/logger"
@using AndroidDataRecorder.Misc
@using AndroidDataRecorder.Database
@using AndroidDataRecorder.Services

@inject IToastService ToastService;
@inject MarkerBridge MarkerBridge;
@inject LogBridge LogBridge;

<header>
    <h1 class="text-center">Logger</h1>
    <br>
</header>

<section id="application">
    <div class="card filter-card">
        <div class="card-header text-center logger">
            Filter
        </div>
        <div class="card-body">
            @foreach(var filterModel in _filterList) {
                
                <EditForm Model="filterModel" OnSubmit="() => Submit(filterModel)">
                    <div class="row">
                        <div class="col">
                            Marker:
                            <MarkerInputSelect class="form-control" ValueExpression="() => filterModel.Marker" Value="filterModel.Marker" ValueChanged="(Marker value) => MarkerChanged(value, filterModel)">
                                @if (filterModel.Marker == null)
                                {
                                    <option value="0"></option>
                                }
                                @foreach (var mar in _dataMarker.GetList(filterModel.DeviceSerial).OrderBy(x => x.TimeStamp))
                                {
                                    <option value="@mar.MarkerId">@mar.TimeStamp | @mar.Message</option>
                                }
                            </MarkerInputSelect>
                        </div>
                        <div class="col">
                            Device:
                            <InputSelect class="form-control" ValueExpression="() => filterModel.DeviceSerial" Value="@filterModel.DeviceSerial" ValueChanged="(string value) => DeviceChanged(value, filterModel)">
                                <option value=@string.Empty>*</option>
                                @foreach (var dev in _dataDevice.DeviceList())
                                {
                                    <option value="@dev.Serial">@dev.DeviceName - @dev.Serial</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col w-auto">
                            Timespan - (Minutes):
                            <InputSelect class="form-control" @bind-Value="@filterModel.timeSpanMinus">
                                @foreach (var minute in timeSpanMinutes)
                                {
                                    <option>@minute</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col w-auto">
                            Timespan + (Minutes):
                            <InputSelect class="form-control" @bind-Value="@filterModel.timeSpanPlus">
                                @foreach (var minute in timeSpanMinutes)
                                {
                                    <option>@minute</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col w-auto">
                            Loglevel:
                            <InputSelect class="form-control" @bind-Value="@filterModel.Level">
                                <option value="">Select...</option>
                                @foreach (var level in loglevels)
                                {
                                    <option>@level</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="col text-right d-flex">
                            <button type="submit" class="mr-1 align-self-end btn btn-md btn-primary">Apply filter</button>
                            <button type="button" class="mr-1 align-self-end btn btn-md btn-primary" @onclick="() => AddFilterToBridge(filterModel)">Add to Ticket</button>
                        </div>
                    </div>
                </EditForm>

                <br>

            }
            <button class="btn btn-primary text-center" @onclick="AddFilter">Add Filter</button>
            
            <div class="card-footer text-right mt-1">
                <a href="/ticket" class="btn btn-success">Go to ticket creation</a>
            </div>
        </div>
    </div>
</section>

<br>

<section id="Logger_table">
    @foreach (var filter in _filterList)
    {
        <div class="card text-center">
            <div class="card-header logger-card-header" style="color: white">
                Log Table of @TimeStampForLogTable(filter)
            </div>

            <div class="card-body">
                <div class="table-wrapper-scroll-y my-custom-scrollbar table-responsive-md ">
                    <table class="table table-bordered table-striped mb-0">
                        <thead>
                        <tr>
                            <th scope="col">Device Name</th>
                            <th scope="col">System Timestamp</th>
                            <th scope="col">Device Timestamp</th>
                            <th scope="col">PID</th>
                            <th scope="col">TID</th>
                            <th scope="col">Loglevel</th>
                            <th scope="col">App</th>
                            <th scope="col">Message</th>
                        </tr>
                        </thead>
                        <tbody class="text-left logtable">
                        @foreach (var log in Enumerable.Reverse(filter.Logs))
                        {
                            <tr>
                                <td>@log.Devicename</td>
                                <td>@log.TimeStamp</td>
                                <td>@log.DeviceTimestamp</td>
                                <td>@log.Pid</td>
                                <td>@log.Tid</td>
                                <td>@log.LogLevel</td>
                                <td>@log.App</td>
                                <td class="text-left">@log.Message</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                <p style="color: #1e7e34"></p>
            </div>
        </div>
        
        <br>
    }
</section>


@code {
    /*
     * List with the Loglevels for the dropdown button
     */
    List<string> loglevels = new List<string>() {"V", "D", "I", "W", "E", "F"};
    
    /*
     * List for the possible timespan minmutes
     */
    List<double> timeSpanMinutes = new List<double>{0,0.5,1,2,3,4,5,6};

    /*
     * Table Logs instance
     */
    private readonly TableLogs _dataLogs = new TableLogs();
    
    /*
     * Table Logs instance
     */
    private readonly TableMarker _dataMarker = new TableMarker();
    
    /*
     * Table Logs instance
     */
    private readonly TableDevices _dataDevice = new TableDevices();

    /*
     *instance of Filtering class 
     */
    readonly List<Filter> _filterList = new List<Filter>();
    
    /*
     * Markers that were selected on the marker page
     */
    List<Marker> _localSelectedMarkers = new List<Marker>();
    
    /*
     * OnClick for the apply filter button
     */
    private bool Submit(Filter filtering)
    {
        try
        {    
            //Check if a value is null
            if (filtering.Level == null)
            {
                ToastService.ShowError("Filter level not set", "Error");
            }
            else
            {
                //fill the Logs list with filtered log data
                filtering.Logs = _dataLogs.GetList( filtering.Marker.DeviceSerial,
                    filtering.Marker.TimeStamp.Subtract(new TimeSpan(0, 0, Convert.ToInt32(filtering.timeSpanMinus * 60))),
                    filtering.Marker.TimeStamp.Add(new TimeSpan(0, 0, Convert.ToInt32(filtering.timeSpanPlus * 60))), filtering.Level);
            }
            
        }
        catch (Exception)
        {
            ToastService.ShowError("Unable to search","Error");
            return false;
        }
        return true;
    }
    
    /*
     * Copy selected markers 
     */
    protected override void OnInitialized()
    {
        base.OnInitialized();
        
        _localSelectedMarkers = MarkerBridge.selectedMarkers.ToList();
        
        foreach (var mar in _localSelectedMarkers)
        {
            _filterList.Add(new Filter(mar, mar.DeviceSerial));
        }
    }

    /*
     * Add filter
     */
    private void AddFilter()
    {
        _filterList.Add(new Filter());
        StateHasChanged();
    }

    /*
     * Add filter to bridge to ticket page
     */
    private void AddFilterToBridge(Filter filter)
    {
        if (Submit(filter))
        {
            LogBridge.Filters.Add(filter);
            ToastService.ShowSuccess("Filter added to Ticket", "Success");
        }
    }

    /*
     * Convert timestamp
     */
    private string TimeStampForLogTable(Filter filter)
    {
        return filter.Marker?.TimeStamp.ToString();
    }

    /*
     * Device in dropdown changed
     */
    private void DeviceChanged(string serial, Filter filterModel)
    {
        filterModel.DeviceSerial = serial;
        filterModel.Marker = !serial.Equals(string.Empty) ? _dataMarker.GetList(serial).First() : null;
        filterModel.Logs.Clear();
    }

    /*
     * Marker in dropdown changed
     */
    private void MarkerChanged(Marker marker, Filter filterModel)
    {
        filterModel.Marker = marker;
        filterModel.DeviceSerial = marker.DeviceSerial;
        filterModel.Logs.Clear();
    }

}