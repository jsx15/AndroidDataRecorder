@page "/Pi"
@using AndroidDataRecorder.Misc
@using AndroidDataRecorder.Database
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Title = Plotly.Blazor.LayoutLib.YAxisLib.Title
@using AndroidDataRecorder.Backend
@using SharpAdbClient

@layout PiLayout

<div class="master">
    <div class="row p-1">
        <div class="col-sm-6">
            <div class="card">
                <button class="btn @BtnColor text-center top-row" @onclick="ToggleBtn">@LoggingBtnText</button>
            </div>
        </div>
        <div class="col-sm-6" style="height: 50px">
            <div class="card">
                <button class="btn btn-primary text-center top-row" @onclick="CreateMarker">Set Marker</button>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col text-center">
            <button class="btn" style="height: 320px" @onclick="OnChartButtonClicked">
                <div class="card">
                    Click on the card to change the device. Current Device is 
                    <PerformanceChart PlotlyLayout="layout" DeviceSerial="_deviceserial"></PerformanceChart>
                </div>
            </button>
        </div>
    </div>

</div>


@code {
    /*
     * Bool for logging button
     */
    private bool _toggleLoggingBtn;

    /*
     * Database
     */
    readonly TableMarker _dataMarker = new TableMarker();

    /*
     * MarkerList
     */
    readonly MarkerList _markerList = new MarkerList();
    
    /*
     * Current shown device
     */
    string _deviceserial;

    /*
     * Adjusting CSS
     */
    private string BtnColor => _toggleLoggingBtn ? "btn-danger" : "btn-success";

    private string LoggingBtnText => _toggleLoggingBtn ? "Stop Logging" : "Start Logging";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (MarkerList.ActiveDeviceData is not null)
        {
            _deviceserial = MarkerList.ActiveDeviceData.Serial;
        }
    }
    /*
     * Toggle logging button
     */
    private void ToggleBtn()
    {
        _toggleLoggingBtn = !_toggleLoggingBtn;
    }

    private void CreateMarker()
    {
    // New Databasemethod
        _dataMarker.InsertValues(MarkerList.GetDeviceSerial(), MarkerList.GetDeviceName(), DateTime.Now, "Marker from pi");

        _markerList.Update();
    }

    private void OnChartButtonClicked()
    {
        Console.WriteLine("clicked");
    }
    
    Layout layout = new Layout()
    {
        AutoSize = true,
        Width = 700,
        Height = 300,
        Title = new Plotly.Blazor.LayoutLib.Title()
        {
            Text = "CPU/Memory usage"
        },
        
        YAxis = new List<YAxis>()
        {
            new YAxis()
            {
                Title = new Title()
                {
                    Text = "Usage in %"
                },
                
                Range = new List<object> {0, 100},
            }
        },
        
        XAxis = new List<XAxis>()
        {
            new XAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title()
                {
                    Text = "Timestamp",
                },
                
            }
        }
    };
    

}