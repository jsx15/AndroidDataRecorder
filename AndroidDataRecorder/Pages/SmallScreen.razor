@page "/Pi"
@using AndroidDataRecorder.Misc
@using AndroidDataRecorder.Database
@using Plotly.Blazor
@using Plotly.Blazor.LayoutLib
@using Title = Plotly.Blazor.LayoutLib.YAxisLib.Title
@using AndroidDataRecorder.Backend
@using AndroidDataRecorder.Screenrecord

@layout PiLayout

<div class="master">
    <div class="row p-1">
        <div class="col-sm-4">
            <div class="card">
                <button class="btn @BtnColor text-center top-row" @onclick="ToggleBtn">@LoggingBtnText</button>
            </div>
        </div>
        <div class="col-sm-4" style="height: 50px">
            <div class="card">
                <button class="btn btn-primary text-center top-row" @onclick="CreateMarker">Set Marker</button>
            </div>
        </div>
         <div class="col-sm-4">
                    <div class="card">
                        <button class="btn @RecordingBtnColor text-center top-row" @onclick="OnRecordingButtonClicked">@RecordingBtnText</button>
                    </div>
                </div>
    </div>

    <div class="row">
        <div class="col text-center">
            <button class="btn" style="height: 320px" @onclick="OnChartButtonClicked">
                <div class="card">
                    Click on the card to change the device. Current Device is @_deviceSerial
                    <PerformanceChart PlotlyLayout="_layout" DeviceSerial="@_deviceSerial"></PerformanceChart>
                </div>
            </button>
        </div>
    </div>

</div>


@code {
    /*
     * Bool for logging button
     */
    private bool _toggleLoggingBtn;
    
    /*
     * Bool for recording button
     */
    private bool _toggleRecordingBtn;

    /*
     * Database
     */
    readonly TableMarker _dataMarker = new TableMarker();

    /*
     * MarkerList
     */
    readonly MarkerList _markerList = new MarkerList();
    
    /*
     * Current shown device
     */
    string _deviceSerial;
    
    /*
     * Counter for device position in connected devices
     */
    int _deviceCount;
    
    /*
     * Adjusting CSS
     */
    private string BtnColor => _toggleLoggingBtn ? "btn-success" : "btn-danger";

    private string LoggingBtnText => _toggleLoggingBtn ? "Start Logging" : "Stop Logging";
    
    private string RecordingBtnColor => _toggleRecordingBtn ? "btn-danger" : "btn-success";
    
    private string RecordingBtnText => _toggleRecordingBtn ? "Stop Recording" : "Start Recording";

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (MarkerList.ActiveDeviceData is not null)
        {
            _deviceSerial = MarkerList.ActiveDeviceData.Serial;
        }
    }
    /*
     * Toggle logging button
     */
    private void ToggleBtn()
    {
        _toggleLoggingBtn = !_toggleLoggingBtn;
        if (_toggleLoggingBtn)
        {
            foreach (var dev in AdbServer.GetConnectedDevices())
            {
                AdbServer.StopLogging(dev);
            }
        }
        else
        {
            foreach (var dev in AdbServer.GetConnectedDevices())
            {
                AdbServer.InitializeLogging(dev);
            }
        }


    }

    /*
     * Set marker for all devices
     * Message: Marker from pi
     */
    private void CreateMarker()
    {
        _dataMarker.InsertValues(MarkerList.GetDeviceSerial(), MarkerList.GetDeviceName(), DateTime.Now, "Marker from pi");

        _markerList.Update();
    }

    /*
     * Stop/Start recording for all connected device
     */
    private void OnRecordingButtonClicked()
    {
        _toggleRecordingBtn = !_toggleRecordingBtn;
        if (_toggleRecordingBtn)
        {
            Console.WriteLine("Recording started for all devices");
            foreach (var dev in AdbServer.GetConnectedDevices())
            {
                RecController.StartScrRec(dev, 30000);
            }
        }
        else
        {
            Console.WriteLine("Recording stopped for all devices");
            foreach (var dev in AdbServer.GetConnectedDevices())
            {
                RecController.StopScrRec(dev);
            }
        }
        
        
    }

    /*
     * Switch shown device
     */
    private void OnChartButtonClicked()
    {
        if (AdbServer.GetConnectedDevices().Count > 0)
        {
            _deviceCount %= AdbServer.GetConnectedDevices().Count;
            _deviceSerial = AdbServer.GetConnectedDevices()[_deviceCount].Serial;
            _deviceCount++;
        }

    }

    readonly Layout _layout = new Layout()
    {
        AutoSize = true,
        Width = 700,
        Height = 300,
        Title = new Plotly.Blazor.LayoutLib.Title()
        {
            Text = "CPU/Memory usage"
        },
        
        YAxis = new List<YAxis>()
        {
            new YAxis()
            {
                Title = new Title()
                {
                    Text = "Usage in %"
                },
                
                Range = new List<object> {0, 100},
            }
        },
        
        XAxis = new List<XAxis>()
        {
            new XAxis()
            {
                Title = new Plotly.Blazor.LayoutLib.XAxisLib.Title()
                {
                    Text = "Timestamp",
                },
                
            }
        }
    };
    

}