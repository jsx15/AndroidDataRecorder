@page "/chart"
@using Plotly.Blazor
@using Plotly.Blazor.ConfigLib
@using Plotly.Blazor.LayoutLib
@using Plotly.Blazor.Traces
@using Plotly.Blazor.Traces.ScatterLib
@using Title = Plotly.Blazor.LayoutLib.YAxisLib.Title
@using SharpAdbClient
@using Config = Plotly.Blazor.Config
@using AdbServer = AndroidDataRecorder.Backend.AdbServer
@using AndroidDataRecorder.Misc

<PlotlyChart @bind-Config="_plotlyConfig" @bind-Layout="PlotlyLayout" @bind-Data="_chartData" @ref="_chart"/>

@code {
    /*
     * the chart for the cpu usage
     */
    PlotlyChart _chart;
    
    /*
     * Config settings for the plotly cpu chart
     */
    Config _plotlyConfig = new Config()
    {
        Responsive = true,
        DisplayModeBar = DisplayModeBarEnum.False,
    };
    
    /*
     * Layout settings for the plotly cpu chart
     */
    [Parameter]
    public Layout PlotlyLayout { get; set; }
    
    /*
     * IList for the chart data
     */
    IList<ITrace> _chartData = new List<ITrace>()
    {
        new Scatter()
        {
            Name = "CPU",
            Mode = ModeFlag.Lines | ModeFlag.Markers,
        },
        
        new Scatter()
        {
            Name = "Memory",
            Mode = ModeFlag.Lines | ModeFlag.Markers,

        },
        
    };
    
    /*
     * Device serial
     */
    [Parameter]
    public string DeviceSerial { get; set; }
    
    /*
     * Database 
     */
    readonly Database.TableResources _data = new Database.TableResources();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        //Eventhandler: CPU chart is refreshed in the workload interval
        AdbServer.Instance.DeviceWorkloadChanged += FillChartWithCpuData;
    }
    
    /*
     * Eventhandler method for cpu chart
     */
    private void FillChartWithCpuData(object sender, DeviceDataEventArgs e)
    {
        if (!(_chart.Data.FirstOrDefault() is Scatter scatter)) return;
        scatter.X = _data.GetList(DeviceSerial).Select(x => (object) x.Timestamp).ToList();
        scatter.Y = _data.GetList(DeviceSerial).Select(x => (object) x.Cpu).ToList();
        
        if (!(_chart.Data[1] is Scatter scatterMemory)) return;
        scatterMemory.X = _data.GetList(DeviceSerial).Select(x => (object) x.Timestamp).ToList();
        scatterMemory.Y = _data.GetList(DeviceSerial).Select(x => (object) x.Memory).ToList();
        
        _chart.React();
    }
}