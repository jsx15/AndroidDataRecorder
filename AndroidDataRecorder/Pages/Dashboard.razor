@page "/Dashboard"
@using System.Threading;
@using AndroidDataRecorder.Misc
@using System.Globalization
@using System.Net
@using AndroidDataRecorder.Screenrecord
@using SharpAdbClient
@using AdbServer = AndroidDataRecorder.Backend.AdbServer

@inject IToastService ToastService;
@page "/"


<header>
    <h1 class="text-center" style="color: white">Dashboard</h1>
</header>

<br>

<main class="justify-content-center">
<section id="device_information">
    <div class="row">
        <div class="col-md">
            <div class="card text-center side-cards">
                <div class="card-header" style="color: white">
                    Overview
                </div>
                <div class="card-body text-left">
                    <div class="table-wrapper-scroll-y my-custom-scrollbar table-hover">
                        <table class="table table-bordered mb-0 text-left">
                            <tbody>
                            @foreach (var item in _attachedDeviceList)
                            {
                                <tr>
                                    <td class="text-left" style="vertical-align: middle">
                                        <input type="radio" name="technology" id="@item" value="@item" @onchange="RadioSelection" checked=@MarkerList.GetDeviceSerial().Equals(item.Serial)/>
                                        <label for="@item">@item.Name - @item.Serial - Connection: @DeviceStates.ConnectionType(item)</label>
                                    </td>
                                    <td class="text-right">
                                        <button class="btn p-2 @LoggingButtonColor(item)" @onclick="() => OnLoggingButtonClick(item)">@LoggingText(item) Logging</button>
                                        <button class="btn p-2 @RecordingButtonColor(item)" @onclick="() => OnRecordingButtonClick(item)">@RecordText(item) Recording</button>
                                        <button class="btn btn-danger p-2" style="text-align: right" @onclick="() => DisconnectDevice(item)">Disconnect</button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer">
                    <label>Selected device is @MarkerList.GetDeviceName() - @MarkerList.GetDeviceSerial()</label>
                </div>
            </div>
        </div>
        <div class="col-md">
            <div class="card text-center side-cards">
                <div class="card-header" style="color: white">
                    Functions
                </div>
                <div class="card-body text-left">
                    <div class="row col">
                        <textarea id="marker_message" type="text" class="form-control" name="marker_message" placeholder="Marker Message..." rows="2" @bind="_markerSetMessage"></textarea>
                    </div>
                    <div class="row col">
                        <p class="card-text">@CurrDateTime</p>
                    </div>
                    <div class="row col justify-content-center">
                        <p>
                            <button class="btn btn-success" @onclick="GetMarkerTime">Set Marker</button>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<br>

<section id="SystemStatus">
    <div class="card">
            <div class="card-header text-center" style="color: white">
                System Stats
            </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6 text-center">
                    <h3>Cpu usage history</h3>
                </div>
                <div class="col-md-6 text-center">
                    <h3>Top 5 expensive processes</h3>
                </div>
            </div>
            
            <br>
            
            <div class="row">
                <div class="col-md-6">
                    Here should be a chart....
                </div>
                <div class="col-md-6">
                    <div class="table-responsive text-center table-bordered">
                        <table class="table table-hover" style="width: 100%; height:  100%; table-layout: auto">
                            <thead>
                            <tr>
                                <th scope="col">Timestamp</th>
                                <th scope="col">Device</th>
                                <th scope="col">Process</th>
                                <th scope="col">CPU</th>
                                <th scope="col">Memory</th>
                            </tr>
                            </thead>
                            <tbody style="font-size: small">
                            @foreach (var res in _intensResourcesList)
                            {
                                <tr>
                                    <td>@res.timestamp</td>
                                    <td>@res.deviceName</td>
                                    <td>@res.process</td>
                                    <td>@res.cpu</td>
                                    <td>@res.memory</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<br>

<section id="testsection">
    <div class="card">
        <div class="card-header">
            <h3 class="text-center" style="color: white">Marker</h3>
        </div>
        <div class="card-body">
            <div style="height: 250px" class="table-wrapper-scroll-y scroll-bar">
                <table class="table table-bordered table-striped">
                    <thead>
                    <tr>
                        <th>Time</th>
                        <th>Message</th>
                    </tr>
                    </thead>
                    <tbody>
                    @*@foreach (var marker in Enumerable.Reverse(_markerList.Markers))*@
                    @foreach (var marker in Enumerable.Reverse(MarkerList.Markers))
                    {
                        <tr>
                            <td style="width: 30%">@marker.timeStamp</td>
                            <td>@marker.message</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</section>

</main>


@code {

    /*
     * Current time and date
     */
    DateTime CurrDateTime { get; set; }

    /*
     * Database 
     */
    readonly AndroidDataRecorder.Database.Database _data = new AndroidDataRecorder.Database.Database();

    /*
     * Text in marker text box
     */
    private string _markerSetMessage;

    /*
     * List of marker
     */
    private readonly MarkerList _markerList = new MarkerList();
    
    /*
     * List of attached devices
     */
    List<DeviceData> _attachedDeviceList;
    
    /*
     * Monitor to detect changes on connected devices
     */
    DeviceMonitor _monitor;
    
    /*
     * List with the 5 most expensive resources
     */
    private List<ResIntensList> _intensResourcesList = new List<ResIntensList>();
    
    /*
     * System stats (temporarily) 
     */
    string cpuPercentage = "98%";
    string memoryUsage = "54%";
    string batterylevel = "86%";

    /*
     * Set callback for timer and fill marker list on page load
     */

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _attachedDeviceList = Backend.AdbServer.GetConnectedDevices();

        _monitor = new DeviceMonitor(new AdbSocket(new IPEndPoint(IPAddress.Loopback, AdbClient.AdbServerPort)));
        _monitor.DeviceChanged += DeviceChanged;
        _monitor.DeviceDisconnected += DeviceChanged;
        _monitor.DeviceConnected += DeviceChanged;
        _monitor.Start();
        
        //EventHandler: IntensiveResources called every 30 seconds
        AdbServer.Instance.DeviceWorkloadChanged += IntensiveResources;
        
    // ReSharper disable once ObjectCreationAsStatement
        new Timer(DateTimeCallback, null, TimeSpan.FromSeconds(1), TimeSpan.FromSeconds(1));
    }
    
    /*
     * FIll list every 30 seconds with the latest 5 most expensive resources
     */
    private void IntensiveResources(object sender, DeviceDataEventArgs e)
    {
        try
        {
            _intensResourcesList = _data.ResourcesIntensLists(MarkerList.GetDeviceSerial());
            InvokeAsync(StateHasChanged);
        }
        catch (Exception)
        {
            Console.WriteLine("crashed");
        }
    }
    
    /*
     * Set CurrDateTime to current time
     */
    private async void DateTimeCallback(object state)
    {
    //CurrDateTime = DateTimeOffset.UtcNow.ToLocalTime().ToString("yyyy-mm-dd hh:mm:ss.fff");
        CurrDateTime = DateTime.Now;
        await InvokeAsync(StateHasChanged);
    }

    /*
     * Gets the time the marker was set and saves it in a list
     */
    private void GetMarkerTime()
    {
        if (ValidateMarker())
        {
            _data.InsertValuesInTableMarker(MarkerList.GetDeviceSerial(), MarkerList.GetDeviceName(), CurrDateTime, _markerSetMessage);

            ToastService.ShowSuccess("Message: " + _markerSetMessage, CurrDateTime.ToString());
            _markerSetMessage = string.Empty;
            _markerList.Update();
            
        }
        else
        {
            ToastService.ShowError("Please put in a message and select a device", "Error");
        }
    }

    private bool ValidateMarker()
    {
        if (!string.IsNullOrWhiteSpace(_markerSetMessage) && MarkerList.ActiveDeviceData is not null)
        {
            return true;
        }
        return false;
    }

    /*
     * Text for logging button
     */
    private string LoggingText(DeviceData device)
    {
        return AdbServer.DeviceIsLogging(device) ? "Stop" : "Start";
    }

    /*
     * Logging button listener
     */
    private void OnLoggingButtonClick(DeviceData device)
    {
        if (AdbServer.DeviceIsLogging(device))
        {
            AdbServer.StopLogging(device);
        }
        else
        {
            AdbServer.InitializeLogging(device);
        }
    }

    /*
     * Color of logging button
     */
    private string LoggingButtonColor(DeviceData device)
    {
        return AdbServer.DeviceIsLogging(device) ? "btn-danger" : "btn-success";
    }

    /*
     * Record button listener
     */
    private void OnRecordingButtonClick(DeviceData device)
    {
        if (RecController.IsRecording(device))
        {
            RecController.StopScrRec(device);
        }
        else
        {
            RecController.StartScrRec(device, 30000);
        }
    }

    /*
     * Text for record button
     */
    private string RecordText(DeviceData device)
    {
        return RecController.IsRecording(device) ? "Stop" : "Start";
    }

    /*
     * Color for record button
     */
    private string RecordingButtonColor(DeviceData device)
    {
        return RecController.IsRecording(device) ? "btn-danger" : "btn-success";
    }

    /*
     * Change selected device
     */
    void RadioSelection(ChangeEventArgs args)
    {
    // Find device by name (args only return string)
        _markerList.SetDevice(_attachedDeviceList.Find(x => x.Serial.Equals(args.Value)));
    }
    
    /*
     * Disconnect only wireless devices -> remove them from attached devices
     * USB devices cannot be disconnected
     */
    private void DisconnectDevice(DeviceData device)
    {
        if (DeviceStates.ConnectionType(device) is DeviceStates.ConnectionTypes.Wifi)
        {
            var split = device.ToString().Split(':');
            AdbServer.DisconnectWirelessClient(split[0]);
            _attachedDeviceList = AdbServer.GetConnectedDevices();
        }
        else
        {
            ToastService.ShowError("Only Wifi devices can be disconnected", "Error");
        }
    }
    
    /*
     * Refresh device list on device changes
     */
    private void DeviceChanged(object sender, DeviceDataEventArgs e)
    {
        _attachedDeviceList = AdbServer.GetConnectedDevices();
        if (MarkerList.ActiveDeviceData is not null && MarkerList.ActiveDeviceData.Serial.Equals(e.Device.Serial))
        {
            MarkerList.ActiveDeviceData = null;
        }
        InvokeAsync(StateHasChanged);
    }

}