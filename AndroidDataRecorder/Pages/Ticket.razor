@page "/ticket"
@using AndroidDataRecorder.Misc
@using AndroidDataRecorder.Services
@using AndroidDataRecorder.Backend
@using Atlassian.Jira
@using System.IO
@using AndroidDataRecorder.Database
@using System.Threading
@using AndroidDataRecorder.Screenrecord
@using System.Diagnostics
@using System.ComponentModel.DataAnnotations

@inject MarkerBridge MarkerBridge;
@inject LogBridge LogBridge;
@inject IToastService ToastService;


<header>
    <h1 class="text-center">Ticket</h1>
    <br>
</header>

<section id="ticket_card">
    <div class="card text-center">
        <div class="card-header">
            JIRA Backlog Entry
        </div>

        <div class="card-body">
            <div class="row">
                <div class="col">
                    <div class="table-wrapper-scroll-y my-custom-scrollbar table-responsive-md " style="overflow-x: hidden">
                        <table class="table table-bordered table-striped mb-0">
                            <tbody class="text-left logtable">
                            @foreach (var filter in _filters)
                            {
                                <tr>
                                    <td>
                                        <div class="row">
                                            <div class="col-4">
                                                Marker @filter.marker.timeStamp
                                            </div>
                                            <div class="col-4">
                                                <EditForm Model="@filter" OnSubmit="@HandleSubmit">
                                                    <label>
                                                        Create Video:
                                                        <InputCheckbox type="checkbox" @bind-Value="filter.CreateVideo"/>
                                                    </label>
                                                    
                                                </EditForm>
                                            </div>
                                            <div class="col-4 text-right">
                                                <button @onclick="() => DeleteButton(filter)" class="btn btn-danger">
                                                    <span style="vertical-align: middle" class="oi oi-circle-x"></span>
                                                </button>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-4">
                                                Log Entries: @filter.Logs.Count
                                            </div>
                                            <div class="col-4">
                                                Timespan: @CalculateTimeSpan(filter.timeSpanMinus, filter.timeSpanPlus) minutes
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <br>


            <EditForm Model="@_ticketModel" OnValidSubmit="@HandleSubmit" OnInvalidSubmit="@OnInvalidSubmit">
                <DataAnnotationsValidator />
                <div class="row">
                    <div class="col-6 text-left">
                        <h3>Entry Title:</h3>
                        <InputText class="form-text w-75" id="description" @bind-Value="_ticketModel.Title" placeholder="Enter title..."></InputText>
                        <ValidationMessage For="@(() => _ticketModel.Title)" />
                    </div>
                    <div class="col-2 text-left">
                        <h3>Issue Type:</h3>
                        <IssueTypeInputSelect class="form-control" id="priority" @bind-Value="_ticketModel.Type">
                            @if (_tc is not null)
                            {
                                @foreach (var type in _tc.IssueTypeList)
                                {
                                    <option value="@type.Id">@type</option>
                                }
                            }
                        </IssueTypeInputSelect>
                    </div>
                    <div class="col-2 text-left">
                        <h3>Priority:</h3>
                        <IssuePriorityInputSelect class="form-control" @bind-Value="_ticketModel.Priority">
                            @if (_tc is not null)
                            {
                                @foreach (var priority in _tc.PriorityList)
                                {
                                    <option value="@priority.Id">@priority</option>
                                }
                            }
                        </IssuePriorityInputSelect>
                    </div>
                </div>
                
                <br>

                <div class="row text-left">
                    <div class="col-6">
                        <h3>Entry Description:</h3>
                        <InputTextArea class="form-text w-75" @bind-Value="_ticketModel.Description" placeholder="Enter description..."></InputTextArea>
                    </div>
                    <div class="col-2">
                        <h3>Project Key:</h3>
                        <InputSelect class="form-control"@bind-Value="_ticketModel.ProjectKey">
                            @if (_tc is not null)
                            {
                                @foreach (var projectKey in _tc.KeyList)
                                {
                                    <option>@projectKey</option>
                                }
                            }
                        </InputSelect>
                    </div>

                    <div class="col-2 text-left">
                        <h3>File Format:</h3>
                        <InputSelect class="form-control" @bind-Value="_ticketModel.FileFormat">
                            <option>@TicketCreator.FileFormat.TextFile</option>
                            <option>@TicketCreator.FileFormat.JsonFile</option>
                        </InputSelect>
                    </div>
                </div>

                <br>
                
                <div class="row">
                    <div class="col text-center">
                        <button disabled="@_createTicketButtonDisable" class="btn btn-primary m-3" type="submit">
                                Create Ticket
                            </button>
                        
                            <div style="visibility: @Spinner; margin: auto 0 auto auto;" class="spinner-border spinner-border-sm" role="status">
                                <span class="sr-only">Loading ...</span>
                            </div>
                    </div>
                </div>
                
            </EditForm>
            
        </div>

    </div>
    
</section>

@code {
    /*
     * Instance of the ticket model class
     */
    private TicketModel _ticketModel;

    /*
     * This is just for testing, okay?
     */
    private List<Filter> _filters = new List<Filter>();

    /*
     * True if ticketcreator is not valid
     */
    private bool _createTicketButtonDisable;
    
    /*
     * Resources data table
     */
    readonly TableResources _dataResources = new TableResources();
    
    /*
     * Visibility of spinner
     */
    private string Spinner { get; set; } = "hidden";

    /*
     * Connection to Jira
     */
    TicketCreator _tc;
    
    private async void HandleSubmit()
    {
        Spinner = "visible";
        foreach (var filter in _filters.Where(filter => filter.CreateVideo))
        {
            RecController.StartCreatingVideo(filter.marker, filter.marker.timeStamp.Subtract(new TimeSpan(0,0,Convert.ToInt32(filter.timeSpanMinus*60))), filter.marker.timeStamp.Add(new TimeSpan(0,0,Convert.ToInt32(filter.timeSpanPlus*60))), 30000);
        }
        
        while (RecController.ThreadCounter != 0)
        {
            Console.WriteLine("ThreadCounter:" + RecController.ThreadCounter);
            await Task.Delay(500);
        }

        foreach (var filter in _filters)
        {
            filter.Resources = _dataResources.GetList(filter.DeviceSerial, filter.marker.timeStamp.AddMinutes(-filter.timeSpanMinus), filter.marker.timeStamp.AddMinutes(filter.timeSpanPlus));
        }

        try
        {
            _tc.CreateTicket(_filters, _ticketModel.ProjectKey, _ticketModel.Type, _ticketModel.Priority, _ticketModel.FileFormat, _ticketModel.Title, _ticketModel.Description);
        }
        catch (Exception)
        {
            ToastService.ShowError("Ticket not created", "Error");
            Spinner = "hidden";
            StateHasChanged();
            return;
        }

        Spinner = "hidden";
        _filters.Clear();
        LogBridge.Filters.Clear();

        _ticketModel.Description = string.Empty;
        _ticketModel.Title = string.Empty;
        ToastService.ShowSuccess("Ticket created", "Success");

        StateHasChanged();
    }
    
    private void OnInvalidSubmit()
    {
        ToastService.ShowError("Ticket not created", "Error");
    }

    private double CalculateTimeSpan(double start, double stop)
    {
        return start + stop;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        try
        {
            _tc = new TicketCreator();
        }
        catch (IOException)
        {
            ToastService.ShowError("Ticket directory could not be created", "Error");
            _createTicketButtonDisable = true;
            _ticketModel = new TicketModel();
            return;
        }
        catch (Exception)
        {
            ToastService.ShowError("No internet connection", "Error");
            _createTicketButtonDisable = true;
            _ticketModel = new TicketModel();
            return;
        }
        _ticketModel = new TicketModel(_tc.IssueTypeList.First(), _tc.PriorityList.First(), _tc.KeyList.First());
        _filters = LogBridge.Filters.ToList();
    }

    private void DeleteButton(Filter filter)
    {
        _filters.Remove(filter);
        LogBridge.Filters.Remove(filter);
    }

    /*
     * Model class
     */
    private class TicketModel

    {
        /*
         * Description of the jira ticket
         */
        [Required(ErrorMessage = "Title is missing")]
        public string Title { get; set; }

        /*
         * Message of the jira ticket
         */
        public string Description { get; set; }

        /*
         * Priority of the jira ticket
         */
        public IssuePriority Priority { get; set; }

        /*
         * Type of the jira ticket
         */
        public IssueType Type { get; set; }
        
        /*
         * Project key
         */
        public string ProjectKey { get; set; }
        
        /*
         * File type
         */
        public TicketCreator.FileFormat FileFormat { get; set; } 

        public TicketModel(IssueType type, IssuePriority prio, string key)
        {
            Type = type;
            Priority = prio;
            ProjectKey = key;
            FileFormat = TicketCreator.FileFormat.TextFile;
        }
        
        public TicketModel() {}
    }

}